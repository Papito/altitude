<!DOCTYPE html>
<html lang="en">
<head>
    <title>ALTITUDE SETUP</title>

    {{> includes/header_common }}

    <style>
        body {
            display: grid;
            grid-template-rows: [header]  3em
                                [content] auto
                                [footer]  2em;
            min-height: 100vh;
        }

        main {
            padding-top: calc(var(--section-vertical-space) * 2);
            display: grid;
            grid-template-columns: 1fr 400px 1fr;
        }

        main > div {
            grid-column: 2;
            display: grid;
            grid-auto-rows: min-content;
            grid-row-gap: var(--section-vertical-space);
        }

        #setupForm {
            display: grid;
            grid-auto-rows: min-content;
            grid-row-gap: var(--section-vertical-space);
        }

        #setupForm label {
            display: block;
            font-weight: bold;
            text-transform: uppercase;
            margin-bottom: 5px;
            font-size: 1.2em;
        }

        #setupForm input:not([type="submit"]) {
            width: 100%
        }

        #setupForm .submit {
            margin-top: var(--control-vertical-space);
            display: grid;
            place-items: center;
        }

        #setupForm input[type="submit"] {
            line-height: 1.3em;
            font-size: 1.2em;
            width: 50%
        }

        .action-button {
            padding: 10px 36px;
            font-size: 1.3em;
        }

    </style>
</head>

<body>

<div>
    {{> includes/brand }}
</div>

<main>
    <div>
        <div id="htmx-alert" hidden class="alert alert-warning sticky-top">LOL</div>
        <form action="#" id="setupForm">
            <div>
                <label for="repositoryName">Library name</label>
                <input type="text"
                       id="repositoryName"
                       name="repositoryName"
                       placeholder="Library name"
                       value="Personal"
                       maxlength="80"/>
            </div>
            <div>
                <label for="fileStore">File storage type</label>
                <input type="text"
                       id="fileStore"
                       name="fileStore"
                       class="readonly"
                       readonly
                       value="filesystem"/>
            </div>
            <div>
                <label for="dataStore">Metadata storage type</label>
                <input type="text"
                       id="dataStore"
                       name="dataStore"
                       class="readonly"
                       readonly
                       value="postgres"/>
            </div>
            <div>
                <label for="adminEmail">Administrator Email</label>
                <input type="email"
                       id="adminEmail"
                       name="adminEmail"
                       maxlength="80"/>
            </div>
            <div>
                <label for="password">Administrator Password</label>
                <input type="password"
                       id="password"
                       name="password"
                       maxlength="50"/>
            </div>
            <div>
                <label for="password2">Confirm Password</label>
                <input type="password"
                       id="password2"
                       name="password2"
                       maxlength="50"/>
            </div>
            <div class="submit">
                <button hx-trigger="click"
                        hx-post="/api/v1/admin/setup"
                        hx-ext="json-enc"
                        class="action-button"
                        id="initialize">Dazzle Me</button>
            </div>
        </form>
    </div>
</main>

<footer>
    By Renegade Otter
</footer>

<script type="module" lang="js">
    document.body.addEventListener('htmx:afterRequest', function (evt) {
        const errorTarget = document.getElementById("htmx-alert")
        if (evt.detail.successful) {
            // Successful request, clear out alert
            errorTarget.setAttribute("hidden", "true")
            errorTarget.innerText = "";
        } else if (evt.detail.failed && evt.detail.xhr) {
            // Server error with response contents, equivalent to htmx:responseError
            console.warn("Server error", evt.detail)

            const jsonResponse = JSON.parse(evt.detail.xhr.responseText);
            console.log(jsonResponse);

            const xhr = evt.detail.xhr;
            errorTarget.innerText = `Unexpected server error: ${xhr.status} - ${xhr.statusText}`;
            errorTarget.removeAttribute("hidden");
        } else {
            // Unspecified failure, usually caused by network error
            console.error("Unexpected htmx error", evt.detail)
            errorTarget.innerText = "Unexpected error, check your connection and try to refresh the page.";
            errorTarget.removeAttribute("hidden");
        }
    });
</script>

</body>
</html>
