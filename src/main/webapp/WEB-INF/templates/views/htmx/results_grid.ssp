#import(software.altitude.core.Const)
#import(software.altitude.core.AltitudeServletContext)
#import(software.altitude.core.RequestContext)
#import(software.altitude.core.models.Asset)
#import(software.altitude.core.util.SearchResult)
#import(software.altitude.core.Api)


<%@ val page: Int = 1 %>
<%@ val nextPage: Int = page + 1 %>
<%@ val results: SearchResult %>
<%@ val isServerSideLoad: Boolean = false %>

<%--

SEE: results_grid.ssp for the plumbing comments of infinite scroll and lazy-loading.

NOTE: The FIRST set of results is server-loaded, this is what "isServerSideLoad" is here for.
      Those images do not have a "data-src" attribute and are NOT watched by the intersection observer
      (first batch is not lazy loaded or unloaded, they are static).
--%>

#for (idx <- 0 to results.records.length - 1)
<% val asset: Asset = results.records(idx) %>
#if (idx == results.records.length - 1 && results.hasMoreResults)
<%-- Last cell is special because it tells HTMX to load the next page --%>
<div class="cell last-cell"
     hx-trigger="intersect"
     hx-get='${ url(htmxSearchResults, Api.Field.REPO_ID -> RequestContext.getRepository.persistedId) }?${Api.Field.Search.PAGE}=${nextPage}'
     hx-swap="afterend">
#else
<div class="cell">
#end

<% var imgUrl = s"/${ Const.DataStore.CONTENT }/r/${software.altitude.core.RequestContext.getRepository.persistedId}/${ Const.DataStore.PREVIEW }/${ asset.persistedId }" %>
<img id="asset-${asset.persistedId}"
     #if (isServerSideLoad)
     src="${imgUrl}"
     #else
     data-src="${imgUrl}"
     #end
     alt="${ asset.fileName }"
     class="responsive-image">

</div>

#end
