<% import software.altitude.core.RequestContext %>
<% import software.altitude.core.util.Util %>
<% import software.altitude.core.Api %>

<style>
    #uploadForm {
        display: grid;
        grid-auto-rows: auto;
        grid-row-gap: calc(var(--control-vertical-space) * 1.5);
    }

    #uploadForm div {
        text-align: center;
    }

    #uploadForm progress {
        width: 100%;
    }

    #uploadForm input[type="file"] {
        background-color: var(--background-form-color);
        color: #FFFFFF;
    }

    #uploadForm input::file-selector-button {
        color: #FFFFFF;
        background-color: var(--background-form-color);
    }

    #uploadForm button {
        font-size: 1.2em;
    }

    #statusTicker {
    }

    #statusText {
        display: none;
        color: var(--success-font-color);
        font-weight: bold;
        padding: 10px;
        font-size: 1.1em;
    }

    #statusText.warning {
        color: var(--warning-font-color);
    }

    #statusText span {
        color: #FFFFFF;
    }

</style>

<%@ val uploadId: String = Util.randomStr() %>

<form id="uploadForm"
      hx-post="${ url(uploadFilesForm, Api.Field.REPO_ID -> RequestContext.getRepository.persistedId, Api.Field.Upload.UPLOAD_ID -> uploadId) }"
      hx-encoding="multipart/form-data">
    <div>
        <input type="file" name="files" id="files" multiple>
    </div>

    <div id="stayOnPage" hidden>
        Files are being uploaded - do not navigate from this page
    </div>

    <div id="progressBarControl" hidden>
        <progress id='progressBar' value='0' max='100'></progress>
    </div>

    <div id="progressTextControl" hidden>
    </div>

    <div id="startUploadButtonControl">
        <button class="action-button">Upload from computer</button>
    </div>

    <div id="abortUploadButtonControl" hidden>
        <button id="abortButton"
                onclick="htmx.trigger('#uploadForm', 'htmx:abort')"
                class="action-button error">Cancel
        </button>
    </div>

    <script type="module">
        const elProgressBarCtrl = htmx.find("#progressBarControl")
        const elStartUploadButton = htmx.find("#startUploadButtonControl")
        const elAbortButton = htmx.find("#abortUploadButtonControl")
        const elStayOnPage = htmx.find("#stayOnPage")
        const elProgressBar = htmx.find("#progressBar")
        const elFiles = htmx.find("#files")
        const elProgressTextCtrl = htmx.find("#progressTextControl")

        function setIdle() {
            elStartUploadButton.removeAttribute("hidden")
            elProgressBarCtrl.setAttribute("hidden", "true")
            elStayOnPage.setAttribute("hidden", "true")
            elAbortButton.setAttribute("hidden", "true")
            elFiles.removeAttribute("disabled")
            elProgressTextCtrl.setAttribute("hidden", "true")
        }

        function setBusy(percentLoaded) {
            elAbortButton.removeAttribute("hidden")
            elProgressBarCtrl.removeAttribute("hidden")
            elStayOnPage.removeAttribute("hidden")
            elProgressBar.setAttribute("value", percentLoaded)
            elStartUploadButton.setAttribute("hidden", "true")
            elFiles.setAttribute("disabled", "true")
            elProgressTextCtrl.removeAttribute("hidden")
            elProgressTextCtrl.innerText = percentLoaded.toString() + "%"
        }

        htmx.on("#uploadForm", "htmx:xhr:progress", function (evt) {
            console.log("!!", evt)
            const percentLoaded = parseInt((evt.detail.loaded / evt.detail.total) * 100)
            setBusy(percentLoaded)

            if (percentLoaded === 100) {
                setIdle()
            }
        })

        htmx.on("#uploadForm", "htmx:abort", function () {
            htmx.ajax("post",
                "<%= url(cancelUpload, Api.Field.REPO_ID -> RequestContext.getRepository.persistedId, Api.Field.Upload.UPLOAD_ID -> uploadId) %>", {
                swap: "none",
                handler: setIdle
            })
        })
    </script>
</form>
