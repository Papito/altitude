#import(software.altitude.core.RequestContext)
#import(software.altitude.core.Const)

<style>
    #rootFolderList .folder.root, .folder-list .children {
        display: grid;
        grid-auto-rows: auto;
        grid-row-gap: 4px;
    }

    #rootFolderList .folder .children {
        position: relative;
        margin-left: 20px;
    }

    #rootFolderList .folder {
        display: grid;
        align-items: center;
        grid-auto-columns: auto;
    }

    #rootFolderList .folder .controls {
        display: grid;
        grid-template-columns: max-content 25px 1fr;
        align-items: center;
    }


    #rootFolderList .folder .menu-ctrl {
        display: grid;
        padding-left: 6px;
        place-items: center;
    }

    #rootFolderList .folder .menu-ctrl a {
        font-size: 1.3em;
        color: #FFFFFF;
        text-decoration: none;
    }

    #rootFolderList .folder i {
        font-size: 1.2em;
    }

    #rootFolderList .folder:not(.root) i.fa-folder-plus {
        color: var(--success-font-color);
    }

    #rootFolderList .folder:not(.root) i.fa-folder-minus {
        color: var(--warning-font-color);
    }

    #rootFolderList .folder .menu {
        display: none;
        padding: 6px 6px 10px 6px;
        flex-wrap: wrap;
        gap: 5px;
        background-color: var(--form-background-color);
    }

    #rootFolderList .folder .menu span {
        display: flex;
        padding: 3px 6px;
        cursor: pointer;
        border: 1px solid gray;
        border-radius: 5px;
        font-size: .9em;
    }

    #rootFolderList .folder .controls.draggable {
        cursor: move;
    }

    #rootFolderList .folder .drop-active {
    }

    #rootFolderList .folder .drop-target {
        border-radius: 6px;
        background-color: var(--dnd-drop-target-color);
    }

    #rootFolderList .folder .can-drop {
        padding-left: 4px;
        border: var(--dnd-draggable-border);
        border-radius: 4px;
        background-color: var(--dnd-can-drop-color);
    }
</style>

<div id="rootFolderList" class="folder-list">
    <% val rootFolderId = RequestContext.getRepository.rootFolderId %>
    <div class="folder root dropzone"
         id="folder-${rootFolderId}"
         folder-id="${rootFolderId}">

        <div class="controls">
            <i class="fas fa-folder"></i>
            <div class="menu-ctrl">
                <a href="#"
                   hx-get="${ url(showFolderContextMenu) }"
                   hx-swap="innerHTML"
                   hx-target="#menu-${rootFolderId}"
                   hx-vals='{"folderId": "${rootFolderId}"}'
                   hx-trigger="click">&#10247;</a>
            </div>
            <span id="folderName-${rootFolderId}" class="folder-name">/Root</span>
        </div>

        <div class="menu" id="menu-${rootFolderId}"></div>

        <div class="children"
             id="children-${rootFolderId}"
             hx-swap="innerHTML"
             hx-get="${ url(htmxFolderChildren) }"
             hx-vals='{"parentId": "${rootFolderId}", "isRoot": true}'
             hx-trigger="load">
        </div>

    </div>
</div>

<script type="module">
    /**
     * MODULE:
     *
     * Before/after HTMX request listeners
     */

    /**
     * This handles multiple "before request" scenarios, short-circuiting the request
     * if necessary.
     *
     * Some actions require a network call (show menu, expand folders)
     * but other do not (close menu, collapse folders).
     */
    htmx.find("#rootFolderList").addEventListener('htmx:beforeRequest', function(evt) {
        /**
         * Context menu potential request
         */
        if (evt.detail.pathInfo.requestPath  === "${ url(showFolderContextMenu) }") {
            const isMenuExpanded = evt.detail.target.querySelector("span") !== null

            // Do not go to the server if the menu is already open, just kill it
            if (isMenuExpanded) {
                evt.preventDefault()
                closeFolderContextMenu(evt.detail.target)
            } else {
                /**
                 * The request for the context meny will go out, so let's go full Marie Kondo
                 * on the open menus because they do not bring us JOY.
                 */
                const openMenus = document.querySelectorAll("#rootFolderList .menu")

                openMenus.forEach(menu => {
                    closeFolderContextMenu(menu)
                })
            }
        }

        /**
         * Folder children potential request
         */
        if (evt.detail.pathInfo.requestPath  === "${ url(htmxFolderChildren) }") {
            const url = new URL("https://dummy.com" + evt.detail.pathInfo.finalRequestPath)
            const folderId = url.searchParams.get("parentId")
            const folderEl = htmx.find("#folder-" + folderId)
            const folderIconEl = htmx.find("#folder-icon-" + folderId)

            /**
             * IF the folder is currently expanded - abort the req and remove the child nodes
             */
            const isExpanded = folderEl.getAttribute(Const.attributes.expanded) === "true"

            if (isExpanded) {
                evt.preventDefault()

                const childrenEl = htmx.findAll("#children-" + folderId + " .folder")

                childrenEl.forEach(child => {
                    clearInnerNodes(child)
                    child.innerHTML = ""
                    child.style.display = "none"
                })

                folderIconEl.classList.remove("fa-folder-minus")
                folderIconEl.classList.add("fa-folder-plus")
                folderEl.setAttribute(Const.attributes.expanded, "false")

                // when we close the folder - probably expected that the menu will close as well
                closeFolderContextMenu(htmx.find("#menu-" + folderId))
            }
        }
    });

    document.addEventListener('htmx:afterRequest', function(evt) {
        if (evt.detail.successful === false) {
            return
        }

        // on successful context menu request, show the menu
        if (evt.detail.pathInfo.requestPath  === "${ url(showFolderContextMenu) }") {
            evt.detail.target.style.display = "flex"
        }

        // on successful children OR add folder request, mark the parent as expanded
        const doesReqExpandChildren = [
            "${ url(htmxFolderChildren) }",
            "${ url(htmxAddFolder) }"].includes(evt.detail.pathInfo.requestPath)

        if (doesReqExpandChildren) {
            const parentFolderId = evt.target.getAttribute("folder-id")

            const url = new URL("https://dummy.com" + evt.detail.pathInfo.finalRequestPath)
            const isRoot = url.searchParams.get("isRoot")

            if (isRoot === "true") {
                return
            }

            /**
             * Mark the parent folder as expanded.
             */
            const folderEl = htmx.find("#folder-" + parentFolderId)
            folderEl.setAttribute(Const.attributes.expanded, "true")

            const folderIconEl = htmx.find("#folder-icon-" + parentFolderId)
            folderIconEl.classList.remove("fa-folder-plus")
            folderIconEl.classList.add("fa-folder-minus")
        }
    });

</script>

<script type="module">
    /**
     * MODULE:
     *
     * DRAGON DROP for folders
     */

    /**
     * Maintain position of the dragged element in order to snap it back at cancel
     * https://github.com/taye/interact.js/issues/819#issuecomment-626599750
     */
    const dragState = {
        x: 0,
        y: 0,
    }

    function dragged(e) {
        dragState.x = 0;
        dragState.y = 0;
        e.target.style.transform = 'translate(0px, 0px)';

        // reset the position attributes for draggablses (on failed drag, it will resume from the last position)
        e.target.removeAttribute("data-x")
        e.target.removeAttribute("data-y")
    }

    interact('#rootFolderList .draggable')
            .draggable({
                // enable inertial throwing
                inertia: true,
                // keep the element within the area of it's parent
                modifiers: [
                    interact.modifiers.restrictRect({
                        restriction: '#rootFolderList > div.children',
                        endOnly: true,
                        elementRect: {
                            top: 0,
                            left: 0,
                            bottom: 1,
                            right: 1
                        }
                    })
                ],
                // enable autoScroll
                autoScroll: true,

                listeners: {
                    move: dragMoveListener,
                    end: dragged,
                }
            })

    function dragMoveListener (event) {
        dragState.x += event.dx;
        dragState.y += event.dy;

        event.target.style.transform = 'translate(' + dragState.x + 'px, ' + dragState.y + 'px)';

        const target = event.target
        // keep the dragged position in the data-x/data-y attributes
        const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
        const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

        // translate the element
        target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'

        // update the position attributes
        target.setAttribute('data-x', x)
        target.setAttribute('data-y', y)
    }

    // enable draggables to be dropped into this
    interact('#rootFolderList .dropzone').dropzone({
        // only accept elements matching this CSS selector
        accept: '#rootFolderList .draggable',
        // going above seems to break the dropzone
        overlap: 0.50,

        // listen for drop related events:

        ondropactivate: function (event) {
            // add active dropzone feedback
            event.target.classList.add('drop-active')
        },
        ondragenter: function (event) {
            const draggableElement = event.relatedTarget
            const dropzoneElement = event.target

            // feedback the possibility of a drop
            dropzoneElement.classList.add('drop-target')
            draggableElement.classList.add('can-drop')
        },
        ondragleave: function (event) {
            // remove the drop feedback style
            event.target.classList.remove('drop-target')
            event.relatedTarget.classList.remove('can-drop')
        },
        ondrop: function (event) {
            const draggableElement = event.relatedTarget
            const dropzoneElement = event.target

            dropzoneElement.classList.remove('drop-active')
            dropzoneElement.classList.remove('drop-target')

            draggableElement.classList.remove('can-drop')

            const movedFolderId = draggableElement.getAttribute("folder-id")
            const newParentFolderId = dropzoneElement.getAttribute("folder-id")
            console.log("Moving folder " + movedFolderId + " to " + newParentFolderId)

            const movedName = htmx.find("#folderName-" + movedFolderId).innerText
            console.log("Moved folder name: " + movedName)
            const newParentName = htmx.find("#folderName-" + newParentFolderId).innerText
            console.log("New parent folder name: " + newParentName)

            const isTargetFolderExpanded = htmx.find("#folder-" + newParentFolderId)
                    .getAttribute(Const.attributes.expanded) === "true"

            const myEvent = new CustomEvent(
                Const.events.folderMoved, {
                detail: {
                    ${Const.Api.Folder.MOVED_FOLDER_ID}: movedFolderId,
                    ${Const.Api.Folder.NEW_PARENT_ID}: newParentFolderId,
                    ${Const.Api.Folder.IS_TARGET_FOLDER_EXPANDED}: isTargetFolderExpanded,
                }});

            document.body.dispatchEvent(myEvent)
            // parentFolderEl.remove()
        },

        ondropdeactivate: function (event) {
            // remove active dropzone feedback
            event.target.classList.remove('drop-active')
            event.target.classList.remove('drop-target')
        }
    })

    interact('#rootFolderList .drag-drop')
            .draggable({
                inertia: true,
                modifiers: [
                    interact.modifiers.restrictRect({
                        restriction: '#rootFolderList .dropzone',
                        endOnly: true
                    })
                ],
                autoScroll: true,
                // dragMoveListener from the dragging demo above
                listeners: { move: dragMoveListener }
            })

</script>

<script type="module">
    /**
     * MODULE:
     *
     * Custom event listeners to fire low-level HTMX requests.
     */

    /**
     * A folder is dragon dropped.
     */
    document.body.addEventListener(Const.events.folderMoved, (event) => {
        const newParentId = event.detail["${Const.Api.Folder.NEW_PARENT_ID}"]
        const movedFolderId = event.detail["${Const.Api.Folder.MOVED_FOLDER_ID}"]

        // The server does check this, but since we remove the moved folder from the DOM, we must short-circuit
        if (newParentId === movedFolderId) {
            return
        }

        htmx.find("#folder-" + movedFolderId).remove()

        htmx.ajax(
            "POST",
            "${ url(htmxMoveFolder) }", {
                "target": "#children-" + newParentId,
                "swap": "innerHTML",
                "values": {...event.detail}
            })
    })

</script>
