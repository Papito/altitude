#import(software.altitude.core.RequestContext)

<style>
    .folder.root, .folder-list .children {
        display: grid;
        grid-auto-rows: auto;
        grid-row-gap: 4px;
    }

    .folder .children {
        position: relative;
        margin-left: 20px;
    }

    .folder {
        display: grid;
        align-items: center;
        grid-auto-columns: auto;
    }

    .folder .controls {
        display: grid;
        grid-template-columns: max-content 25px 1fr;
        align-items: center;
    }


    .folder .menu-ctrl {
        display: grid;
        padding-left: 6px;
        place-items: center;
    }

    .folder .menu-ctrl a {
        font-size: 1.3em;
        color: #FFFFFF;
        text-decoration: none;
    }

    .folder i {
        font-size: 1.2em;
    }

    .folder:not(.root) i.fa-folder-plus {
        color: var(--success-font-color);
    }

    .folder:not(.root) i.fa-folder-minus {
        color: var(--warning-font-color);
    }

    .folder .menu {
        display: none;
        padding: 6px 6px 10px 6px;
        flex-wrap: wrap;
        gap: 5px;
        background-color: var(--form-background-color);
    }

    .folder .menu span {
        display: flex;
        padding: 3px 6px;
        cursor: pointer;
        border: 1px solid gray;
        border-radius: 5px;
        font-size: .9em;
    }
</style>

<div id="rootFolderList" class="folder-list">
    <% val rootFolderId = RequestContext.getRepository.rootFolderId %>
    <div class="folder root" id="${rootFolderId}">
        <div class="controls">
            <i class="fas fa-folder"></i>
            <div class="menu-ctrl">
                <a href="#"
                   hx-get="/htmx/folder/context-menu"
                   hx-swap="innerHTML"
                   hx-target="#menu-${rootFolderId}"
                   hx-vals='{"folderId": "${rootFolderId}"}'
                   hx-trigger="click">&#10247;</a>
            </div>
            <span>Root /</span>
        </div>
        <div class="menu" id="menu-${rootFolderId}"></div>

        <div class="children"
             id="children-${rootFolderId}"
             hx-swap="innerHTML"
             hx-get="/htmx/folder/children"
             hx-vals='{"parentId": "${rootFolderId}", "isRoot": true}'
             hx-trigger="load">
        </div>

    </div>
</div>

<script lang="js" type="module">
    function closeMenu(menuEl) {
        clearInnerNodes(menuEl)
        menuEl.innerHTML = ""
        menuEl.style.display = "none"
    }

    htmx.find("#rootFolderList").addEventListener('htmx:beforeRequest', function(evt) {
        /**
         * Context menu potential request
         */
        if (evt.detail.pathInfo.requestPath  === "/htmx/folder/context-menu") {
            const isMenuExpanded = evt.detail.target.querySelector("span") !== null

            // Do not go to the server if the menu is already open, just kill it
            if (isMenuExpanded) {
                evt.preventDefault()
                closeMenu(evt.detail.target)
            } else {
                /**
                 * The request for the context meny will go out, so let's go full Marie Kondo
                 * on the open menus because they do not bring us JOY.
                 */
                const openMenus = document.querySelectorAll("#rootFolderList .menu")

                openMenus.forEach(menu => {
                    closeMenu(menu)
                })
            }
        }

        /**
         * Folder children potential request
         */
        if (evt.detail.pathInfo.requestPath  === "/htmx/folder/children") {
            const url = new URL("https://dummy.com" + evt.detail.pathInfo.finalRequestPath)
            const parentFolderId = url.searchParams.get("parentId")
            const folderIconEl = htmx.find("#folder-" + parentFolderId + " .expanded")

            /**
             * The folder is currently expanded - abort the req and remove the child nodes
             */
            if (folderIconEl !== null) {
                evt.preventDefault()

                const childrenEl = htmx.findAll("#children-" + parentFolderId + " .folder")

                childrenEl.forEach(child => {
                    clearInnerNodes(child)
                    child.innerHTML = ""
                    child.style.display = "none"
                })

                folderIconEl.classList.remove("fa-folder-minus")
                folderIconEl.classList.add("fa-folder-plus")
                folderIconEl.classList.remove("expanded")

                // when we close the folder - probably expected that the menu will go as well
                closeMenu(htmx.find("#menu-" + parentFolderId))
            }
        }
    });

    htmx.find("#rootFolderList").addEventListener('htmx:afterRequest', function(evt) {
        if (evt.detail.successful === false) {
            return
        }

        // on successful context menu request, show the menu
        if (evt.detail.pathInfo.requestPath  === "/htmx/folder/context-menu") {
            evt.detail.target.style.display = "flex"
        }

        // on successful folder children request, mark the parent as expanded
        if (evt.detail.pathInfo.requestPath  === "/htmx/folder/children") {
            const url = new URL("https://dummy.com" + evt.detail.pathInfo.finalRequestPath)
            const isRoot = url.searchParams.get("isRoot")

            if (isRoot === "true") {
                return
            }

            /**
             * Mark the parent folder as expanded.
             * High confidence here that the req would fail without parent ID as that's vehemently required.
             * Vehemently.
             */
            const parentFolderId = url.searchParams.get("parentId")
            const folderIconEl = htmx.find("#folder-" + parentFolderId + " i.fa-folder-plus")
            folderIconEl.classList.remove("fa-folder-plus")
            folderIconEl.classList.add("fa-folder-minus")
            folderIconEl.classList.add("expanded")
        }
    });

</script>
